package com.byalif.coding.demo.model;

import java.util.*;

public class KeywordDictionary {
	public static final Map<String, List<String>> CATEGORY_KEYWORDS = Map.ofEntries(
			// Already covered topics
			Map.entry("Graph",
					List.of("bfs", "dfs", "nodes", "edges", "neighbors", "adjacency", "cycle", "shortest path",
							"dijkstra", "topological", "mst", "kruskal", "connected components", "bellman-ford",
							"undirected", "directed", "weighted", "unweighted", "graph traversal",
							"graph representation")),
			Map.entry("Tree",
					List.of("bfs", "dfs", "binary", "root", "leaf", "inorder", "preorder", "postorder", "traversal",
							"balanced", "bst", "height", "depth", "path", "ancestor", "descendant", "mirror",
							"binary search", "kth smallest", "lca", "avl")),
			Map.entry("Dynamic Programming",
					List.of("dp", "memoization", "recursion", "subproblem", "state", "transition", "optimization",
							"overlapping subproblems", "knapsack", "subset sum", "palindrome partition",
							"edit distance", "longest subsequence", "maximum sum", "fibonacci", "grid traversal",
							"tabulation", "decision tree", "state diagram", "top-down", "bottom-up", "array dp")),
			Map.entry("Queue",
					List.of("enqueue", "dequeue", "circular queue", "priority queue", "fifo", "sliding window",
							"max queue", "min queue", "double-ended queue", "deque", "task scheduling",
							"producer-consumer", "blocking queue", "thread-safe queue", "message queue", "queue depth",
							"capacity", "front", "rear", "queue operations", "poll", "offer", "dynamic resizing",
							"queue overflow", "queue underflow")),
			Map.entry("Prefix Sums",
					List.of("prefix array", "cumulative sum", "range sum", "subarray sum", "sum difference",
							"prefix index", "prefix subtraction", "prefix division", "efficient sum",
							"frequency prefix", "normalized prefix", "partial sums", "sliding window sum",
							"two-pointer prefix", "prefix optimization", "range query", "sum query", "modulo prefix",
							"prefix minimum", "prefix maximum")),
			Map.entry("Matrix", List.of("2d array", "matrix traversal", "row-wise", "column-wise", "diagonal traverse",
					"transpose", "rotation", "spiral order", "matrix multiplication", "determinant", "inverse",
					"symmetric", "asymmetric", "identity matrix", "adjacency matrix", "sparse matrix", "dense matrix",
					"matrix addition", "matrix subtraction", "maximal rectangle", "matrix chain multiplication")),
			Map.entry("String",
					List.of("substring", "anagram", "palindrome", "pattern", "concatenation", "trie", "manacher's",
							"suffix", "prefix", "lexicographical", "kmp", "z-algorithm", "aho-corasick", "reverse",
							"split", "compare", "remove duplicates", "character frequency", "reorder",
							"longest common prefix", "string matching", "replace")),
			Map.entry("Array",
					List.of("prefix sum", "sliding window", "merge intervals", "subarray", "sort", "binary search",
							"two pointers", "rotate", "partition", "duplicate", "in-place", "maximum subarray",
							"matrix", "spiral", "row-wise", "column-wise", "merge sorted", "frequency", "3-sum",
							"4-sum", "kadane's algorithm", "monotonic")),
			Map.entry("Backtracking",
					List.of("generate permutations", "generate combinations", "prune", "constraints", "recursion tree",
							"explore paths", "n-queens", "sudoku", "subset generation", "knight's tour",
							"generate subsets", "grid traversal", "coloring", "decision space", "generate strings",
							"solve mazes", "generate partitions")),
			Map.entry("Greedy",
					List.of("local optimal", "global optimal", "interval scheduling", "activity selection",
							"fractional knapsack", "minimum spanning tree", "kruskal", "prim", "huffman coding",
							"minimum coins", "greedy choice", "optimal merge", "priority queue", "sorting",
							"job sequencing", "maximum tasks", "task assignment")),
			Map.entry("Bit Manipulation",
					List.of("xor", "and", "or", "shift", "bitmask", "toggle", "flip", "count set bits",
							"binary representation", "rightmost bit", "leftmost bit", "parity", "bitwise operations",
							"subset generation", "bit manipulation tricks", "check power of 2", "bitwise dp",
							"clear bit", "set bit", "toggle bit")),
			Map.entry("Linked List",
					List.of("singly", "doubly", "merge lists", "reverse list", "detect cycle", "intersection",
							"middle node", "delete node", "add node", "nth node", "head", "tail", "pointer",
							"swap nodes", "partition list", "rotate", "k-group reverse", "sorted list", "palindrome")),
			Map.entry("Heap",
					List.of("priority queue", "min heap", "max heap", "heapify", "merge k lists", "kth largest",
							"kth smallest", "median stream", "top k elements", "frequency sort", "heap sort",
							"dijkstra", "prim", "range sum", "monotonic queue", "task scheduling", "sliding window max",
							"custom comparator", "priority")),
			Map.entry("Math",
					List.of("prime", "factorization", "gcd", "lcm", "modulo", "modular arithmetic", "divisors",
							"combinations", "permutations", "power", "logarithm", "factorial", "square root",
							"number theory", "sum of digits", "digit manipulation", "palindrome number", "fibonacci",
							"modular exponentiation")),
			Map.entry("Union-Find",
					List.of("disjoint set", "connected components", "union", "find", "path compression",
							"union by rank", "cycle detection", "kruskal's algorithm", "mst", "connected", "groups",
							"friend circles", "union-find data structure", "quick union", "quick find", "network")),
			Map.entry("Topological Sort",
					List.of("directed acyclic graph", "dag", "linear ordering", "kahn's algorithm", "bfs", "dfs",
							"dependency graph", "precedence", "topological order", "graph cycle", "acyclic",
							"task scheduling", "project scheduling", "prerequisites")),
			Map.entry("Intervals",
					List.of("merge intervals", "overlap", "disjoint", "subintervals", "gap", "union of intervals",
							"sorting intervals", "interval intersections", "maximum coverage", "point inclusion",
							"meeting rooms", "event scheduling", "range queries", "overlapping intervals")),
			Map.entry("Monotonic Stack",
					List.of("next greater element", "next smaller element", "span", "max rectangle",
							"largest rectangle", "area histogram", "stock span", "water trap", "rainwater",
							"monotonic increasing", "monotonic decreasing", "deque", "sliding window")),
			Map.entry("Game Theory",
					List.of("nim game", "grundy number", "minimax", "optimal strategy", "backtracking", "dp games",
							"combinatorial games", "stones game", "zero-sum game", "turn-based", "game tree",
							"win condition", "strategy", "state space", "prisoner's dilemma")),
			Map.entry("Trie",
					List.of("prefix tree", "insert", "search", "delete", "autocomplete", "word dictionary",
							"suffix trie", "longest prefix", "shortest unique prefix", "word break", "spell check",
							"string matching", "trie node", "trie traversal", "common prefix", "word search",
							"dictionary lookup")),
			Map.entry("Sliding Window",
					List.of("fixed window", "variable window", "maximum sum", "minimum length", "longest substring",
							"anagram substring", "unique characters", "two pointers", "k distinct characters",
							"frequency map", "shrink window", "expand window", "optimize window size",
							"minimum window substring", "sliding sum")));

	public static Map<String, List<Map<String, String>>> PROBLEM_LINKS = new HashMap<>();

	static {
		PROBLEM_LINKS.put("Graph", List.of(
				Map.of("title", "Graph Valid Tree", "url", "https://leetcode.com/problems/graph-valid-tree/"),
				Map.of("title", "Number of Islands", "url", "https://leetcode.com/problems/number-of-islands/"),
				Map.of("title", "Course Schedule", "url", "https://leetcode.com/problems/course-schedule/"),
				Map.of("title", "Course Schedule II", "url", "https://leetcode.com/problems/course-schedule-ii/"),
				Map.of("title", "Clone Graph", "url", "https://leetcode.com/problems/clone-graph/"),
				Map.of("title", "All Paths From Source to Target", "url",
						"https://leetcode.com/problems/all-paths-from-source-to-target/"),
				Map.of("title", "Shortest Path in Binary Matrix", "url",
						"https://leetcode.com/problems/shortest-path-in-binary-matrix/"),
				Map.of("title", "Critical Connections in a Network", "url",
						"https://leetcode.com/problems/critical-connections-in-a-network/"),
				Map.of("title", "Network Delay Time", "url", "https://leetcode.com/problems/network-delay-time/"),
				Map.of("title", "Keys and Rooms", "url", "https://leetcode.com/problems/keys-and-rooms/"),
				Map.of("title", "Word Ladder", "url", "https://leetcode.com/problems/word-ladder/"),
				Map.of("title", "Cheapest Flights Within K Stops", "url",
						"https://leetcode.com/problems/cheapest-flights-within-k-stops/"),
				Map.of("title", "Alien Dictionary", "url", "https://leetcode.com/problems/alien-dictionary/"),
				Map.of("title", "Redundant Connection", "url", "https://leetcode.com/problems/redundant-connection/"),
				Map.of("title", "Find Eventual Safe States", "url",
						"https://leetcode.com/problems/find-eventual-safe-states/"),
				Map.of("title", "Detect Cycles in a Graph", "url", "https://leetcode.com/problems/course-schedule/"),
				Map.of("title", "Rotting Oranges", "url", "https://leetcode.com/problems/rotting-oranges/"),
				Map.of("title", "Minimum Cost to Connect All Points", "url",
						"https://leetcode.com/problems/min-cost-to-connect-all-points/"),
				Map.of("title", "Graph Bipartiteness", "url", "https://leetcode.com/problems/is-graph-bipartite/"),
				Map.of("title", "Pacific Atlantic Water Flow", "url",
						"https://leetcode.com/problems/pacific-atlantic-water-flow/")));
		
		PROBLEM_LINKS.put("Tree", List.of(
			    Map.of("title", "Binary Tree Inorder Traversal", "url", "https://leetcode.com/problems/binary-tree-inorder-traversal/"),
			    Map.of("title", "Maximum Depth of Binary Tree", "url", "https://leetcode.com/problems/maximum-depth-of-binary-tree/"),
			    Map.of("title", "Lowest Common Ancestor of a Binary Tree", "url", "https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/"),
			    Map.of("title", "Binary Tree Level Order Traversal", "url", "https://leetcode.com/problems/binary-tree-level-order-traversal/"),
			    Map.of("title", "Construct Binary Tree from Preorder and Inorder Traversal", "url", "https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/"),
			    Map.of("title", "Path Sum", "url", "https://leetcode.com/problems/path-sum/"),
			    Map.of("title", "Diameter of Binary Tree", "url", "https://leetcode.com/problems/diameter-of-binary-tree/"),
			    Map.of("title", "Validate Binary Search Tree", "url", "https://leetcode.com/problems/validate-binary-search-tree/"),
			    Map.of("title", "Symmetric Tree", "url", "https://leetcode.com/problems/symmetric-tree/"),
			    Map.of("title", "Flatten Binary Tree to Linked List", "url", "https://leetcode.com/problems/flatten-binary-tree-to-linked-list/"),
			    Map.of("title", "Binary Tree Zigzag Level Order Traversal", "url", "https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/"),
			    Map.of("title", "Kth Smallest Element in a BST", "url", "https://leetcode.com/problems/kth-smallest-element-in-a-bst/"),
			    Map.of("title", "Binary Search Tree Iterator", "url", "https://leetcode.com/problems/binary-search-tree-iterator/"),
			    Map.of("title", "Recover Binary Search Tree", "url", "https://leetcode.com/problems/recover-binary-search-tree/"),
			    Map.of("title", "Serialize and Deserialize Binary Tree", "url", "https://leetcode.com/problems/serialize-and-deserialize-binary-tree/"),
			    Map.of("title", "Sum Root to Leaf Numbers", "url", "https://leetcode.com/problems/sum-root-to-leaf-numbers/"),
			    Map.of("title", "Construct Binary Tree from Inorder and Postorder Traversal", "url", "https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/"),
			    Map.of("title", "Populating Next Right Pointers in Each Node", "url", "https://leetcode.com/problems/populating-next-right-pointers-in-each-node/"),
			    Map.of("title", "Invert Binary Tree", "url", "https://leetcode.com/problems/invert-binary-tree/"),
			    Map.of("title", "Balanced Binary Tree", "url", "https://leetcode.com/problems/balanced-binary-tree/")
			));
		
		PROBLEM_LINKS.put("Dynamic Programming", List.of(
			    Map.of("title", "Longest Increasing Subsequence", "url", "https://leetcode.com/problems/longest-increasing-subsequence/"),
			    Map.of("title", "Climbing Stairs", "url", "https://leetcode.com/problems/climbing-stairs/"),
			    Map.of("title", "House Robber", "url", "https://leetcode.com/problems/house-robber/"),
			    Map.of("title", "House Robber II", "url", "https://leetcode.com/problems/house-robber-ii/"),
			    Map.of("title", "Maximum Product Subarray", "url", "https://leetcode.com/problems/maximum-product-subarray/"),
			    Map.of("title", "Partition Equal Subset Sum", "url", "https://leetcode.com/problems/partition-equal-subset-sum/"),
			    Map.of("title", "Word Break", "url", "https://leetcode.com/problems/word-break/"),
			    Map.of("title", "Unique Paths", "url", "https://leetcode.com/problems/unique-paths/"),
			    Map.of("title", "Minimum Path Sum", "url", "https://leetcode.com/problems/minimum-path-sum/"),
			    Map.of("title", "Edit Distance", "url", "https://leetcode.com/problems/edit-distance/"),
			    Map.of("title", "Decode Ways", "url", "https://leetcode.com/problems/decode-ways/"),
			    Map.of("title", "Coin Change", "url", "https://leetcode.com/problems/coin-change/"),
			    Map.of("title", "Longest Palindromic Subsequence", "url", "https://leetcode.com/problems/longest-palindromic-subsequence/"),
			    Map.of("title", "Longest Common Subsequence", "url", "https://leetcode.com/problems/longest-common-subsequence/"),
			    Map.of("title", "Maximum Subarray", "url", "https://leetcode.com/problems/maximum-subarray/"),
			    Map.of("title", "Jump Game", "url", "https://leetcode.com/problems/jump-game/"),
			    Map.of("title", "Jump Game II", "url", "https://leetcode.com/problems/jump-game-ii/"),
			    Map.of("title", "Triangle", "url", "https://leetcode.com/problems/triangle/"),
			    Map.of("title", "Distinct Subsequences", "url", "https://leetcode.com/problems/distinct-subsequences/"),
			    Map.of("title", "Palindromic Substrings", "url", "https://leetcode.com/problems/palindromic-substrings/")
			));
		
		PROBLEM_LINKS.put("String", List.of(
			    Map.of("title", "Longest Palindromic Substring", "url", "https://leetcode.com/problems/longest-palindromic-substring/"),
			    Map.of("title", "Valid Anagram", "url", "https://leetcode.com/problems/valid-anagram/"),
			    Map.of("title", "Group Anagrams", "url", "https://leetcode.com/problems/group-anagrams/"),
			    Map.of("title", "Longest Substring Without Repeating Characters", "url", "https://leetcode.com/problems/longest-substring-without-repeating-characters/"),
			    Map.of("title", "Minimum Window Substring", "url", "https://leetcode.com/problems/minimum-window-substring/"),
			    Map.of("title", "Valid Palindrome", "url", "https://leetcode.com/problems/valid-palindrome/"),
			    Map.of("title", "Palindrome Partitioning", "url", "https://leetcode.com/problems/palindrome-partitioning/"),
			    Map.of("title", "Reverse Words in a String", "url", "https://leetcode.com/problems/reverse-words-in-a-string/"),
			    Map.of("title", "String to Integer (atoi)", "url", "https://leetcode.com/problems/string-to-integer-atoi/"),
			    Map.of("title", "Zigzag Conversion", "url", "https://leetcode.com/problems/zigzag-conversion/"),
			    Map.of("title", "Longest Common Prefix", "url", "https://leetcode.com/problems/longest-common-prefix/"),
			    Map.of("title", "Check If Two String Arrays are Equivalent", "url", "https://leetcode.com/problems/check-if-two-string-arrays-are-equivalent/"),
			    Map.of("title", "Count and Say", "url", "https://leetcode.com/problems/count-and-say/"),
			    Map.of("title", "Multiply Strings", "url", "https://leetcode.com/problems/multiply-strings/"),
			    Map.of("title", "Restore IP Addresses", "url", "https://leetcode.com/problems/restore-ip-addresses/"),
			    Map.of("title", "Find All Anagrams in a String", "url", "https://leetcode.com/problems/find-all-anagrams-in-a-string/"),
			    Map.of("title", "Sort Characters By Frequency", "url", "https://leetcode.com/problems/sort-characters-by-frequency/"),
			    Map.of("title", "Roman to Integer", "url", "https://leetcode.com/problems/roman-to-integer/"),
			    Map.of("title", "Integer to Roman", "url", "https://leetcode.com/problems/integer-to-roman/"),
			    Map.of("title", "Add Binary", "url", "https://leetcode.com/problems/add-binary/")
			));
		
		PROBLEM_LINKS.put("Backtracking", List.of(
			    Map.of("title", "N-Queens", "url", "https://leetcode.com/problems/n-queens/"),
			    Map.of("title", "Sudoku Solver", "url", "https://leetcode.com/problems/sudoku-solver/"),
			    Map.of("title", "Word Search", "url", "https://leetcode.com/problems/word-search/"),
			    Map.of("title", "Generate Parentheses", "url", "https://leetcode.com/problems/generate-parentheses/"),
			    Map.of("title", "Combination Sum", "url", "https://leetcode.com/problems/combination-sum/"),
			    Map.of("title", "Combination Sum II", "url", "https://leetcode.com/problems/combination-sum-ii/"),
			    Map.of("title", "Subsets", "url", "https://leetcode.com/problems/subsets/"),
			    Map.of("title", "Permutations", "url", "https://leetcode.com/problems/permutations/"),
			    Map.of("title", "Permutations II", "url", "https://leetcode.com/problems/permutations-ii/"),
			    Map.of("title", "Letter Combinations of a Phone Number", "url", "https://leetcode.com/problems/letter-combinations-of-a-phone-number/"),
			    Map.of("title", "Restore IP Addresses", "url", "https://leetcode.com/problems/restore-ip-addresses/"),
			    Map.of("title", "Palindromic Partitioning", "url", "https://leetcode.com/problems/palindrome-partitioning/"),
			    Map.of("title", "Find Unique Binary String", "url", "https://leetcode.com/problems/find-unique-binary-string/"),
			    Map.of("title", "Matchsticks to Square", "url", "https://leetcode.com/problems/matchsticks-to-square/"),
			    Map.of("title", "Split Array into Fibonacci Sequence", "url", "https://leetcode.com/problems/split-array-into-fibonacci-sequence/"),
			    Map.of("title", "Combinations", "url", "https://leetcode.com/problems/combinations/"),
			    Map.of("title", "Gray Code", "url", "https://leetcode.com/problems/gray-code/"),
			    Map.of("title", "Brace Expansion", "url", "https://leetcode.com/problems/brace-expansion/"),
			    Map.of("title", "Word Search II", "url", "https://leetcode.com/problems/word-search-ii/"),
			    Map.of("title", "Beautiful Arrangement", "url", "https://leetcode.com/problems/beautiful-arrangement/")
			));
		
		PROBLEM_LINKS.put("Array", List.of(
			    Map.of("title", "Two Sum", "url", "https://leetcode.com/problems/two-sum/"),
			    Map.of("title", "Maximum Subarray", "url", "https://leetcode.com/problems/maximum-subarray/"),
			    Map.of("title", "Product of Array Except Self", "url", "https://leetcode.com/problems/product-of-array-except-self/"),
			    Map.of("title", "Find Minimum in Rotated Sorted Array", "url", "https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/"),
			    Map.of("title", "Search in Rotated Sorted Array", "url", "https://leetcode.com/problems/search-in-rotated-sorted-array/"),
			    Map.of("title", "Container With Most Water", "url", "https://leetcode.com/problems/container-with-most-water/"),
			    Map.of("title", "Trapping Rain Water", "url", "https://leetcode.com/problems/trapping-rain-water/"),
			    Map.of("title", "3Sum", "url", "https://leetcode.com/problems/3sum/"),
			    Map.of("title", "4Sum", "url", "https://leetcode.com/problems/4sum/"),
			    Map.of("title", "Merge Intervals", "url", "https://leetcode.com/problems/merge-intervals/"),
			    Map.of("title", "Insert Interval", "url", "https://leetcode.com/problems/insert-interval/"),
			    Map.of("title", "Spiral Matrix", "url", "https://leetcode.com/problems/spiral-matrix/"),
			    Map.of("title", "Set Matrix Zeroes", "url", "https://leetcode.com/problems/set-matrix-zeroes/"),
			    Map.of("title", "Pascal's Triangle", "url", "https://leetcode.com/problems/pascals-triangle/"),
			    Map.of("title", "Majority Element", "url", "https://leetcode.com/problems/majority-element/"),
			    Map.of("title", "Sort Colors", "url", "https://leetcode.com/problems/sort-colors/"),
			    Map.of("title", "Minimum Size Subarray Sum", "url", "https://leetcode.com/problems/minimum-size-subarray-sum/"),
			    Map.of("title", "Subarray Sum Equals K", "url", "https://leetcode.com/problems/subarray-sum-equals-k/"),
			    Map.of("title", "Find Peak Element", "url", "https://leetcode.com/problems/find-peak-element/"),
			    Map.of("title", "Best Time to Buy and Sell Stock", "url", "https://leetcode.com/problems/best-time-to-buy-and-sell-stock/")
			));

		PROBLEM_LINKS.put("Greedy", List.of(
			    Map.of("title", "Jump Game", "url", "https://leetcode.com/problems/jump-game/"),
			    Map.of("title", "Jump Game II", "url", "https://leetcode.com/problems/jump-game-ii/"),
			    Map.of("title", "Partition Labels", "url", "https://leetcode.com/problems/partition-labels/"),
			    Map.of("title", "Assign Cookies", "url", "https://leetcode.com/problems/assign-cookies/"),
			    Map.of("title", "Minimum Number of Arrows to Burst Balloons", "url", "https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/"),
			    Map.of("title", "Non-overlapping Intervals", "url", "https://leetcode.com/problems/non-overlapping-intervals/"),
			    Map.of("title", "Erase Overlap Intervals", "url", "https://leetcode.com/problems/erase-overlap-intervals/"),
			    Map.of("title", "Candy", "url", "https://leetcode.com/problems/candy/"),
			    Map.of("title", "Gas Station", "url", "https://leetcode.com/problems/gas-station/"),
			    Map.of("title", "Queue Reconstruction by Height", "url", "https://leetcode.com/problems/queue-reconstruction-by-height/"),
			    Map.of("title", "Reorganize String", "url", "https://leetcode.com/problems/reorganize-string/"),
			    Map.of("title", "Greedy Scheduler", "url", "https://leetcode.com/problems/task-scheduler/"),
			    Map.of("title", "Maximum Subarray", "url", "https://leetcode.com/problems/maximum-subarray/"),
			    Map.of("title", "Longest Increasing Subsequence", "url", "https://leetcode.com/problems/longest-increasing-subsequence/"),
			    Map.of("title", "Car Pooling", "url", "https://leetcode.com/problems/car-pooling/"),
			    Map.of("title", "Lemonade Change", "url", "https://leetcode.com/problems/lemonade-change/"),
			    Map.of("title", "Two City Scheduling", "url", "https://leetcode.com/problems/two-city-scheduling/"),
			    Map.of("title", "Maximum Units on a Truck", "url", "https://leetcode.com/problems/maximum-units-on-a-truck/"),
			    Map.of("title", "Split Array into Consecutive Subsequences", "url", "https://leetcode.com/problems/split-array-into-consecutive-subsequences/"),
			    Map.of("title", "Reduce Array Size to The Half", "url", "https://leetcode.com/problems/reduce-array-size-to-the-half/")
			));
		
		
		PROBLEM_LINKS.put("Bit Manipulation", List.of(
			    Map.of("title", "Single Number", "url", "https://leetcode.com/problems/single-number/"),
			    Map.of("title", "Single Number II", "url", "https://leetcode.com/problems/single-number-ii/"),
			    Map.of("title", "Missing Number", "url", "https://leetcode.com/problems/missing-number/"),
			    Map.of("title", "Sum of Two Integers", "url", "https://leetcode.com/problems/sum-of-two-integers/"),
			    Map.of("title", "Number of 1 Bits", "url", "https://leetcode.com/problems/number-of-1-bits/"),
			    Map.of("title", "Counting Bits", "url", "https://leetcode.com/problems/counting-bits/"),
			    Map.of("title", "Reverse Bits", "url", "https://leetcode.com/problems/reverse-bits/"),
			    Map.of("title", "Power of Two", "url", "https://leetcode.com/problems/power-of-two/"),
			    Map.of("title", "Divide Two Integers", "url", "https://leetcode.com/problems/divide-two-integers/"),
			    Map.of("title", "XOR Operation in an Array", "url", "https://leetcode.com/problems/xor-operation-in-an-array/"),
			    Map.of("title", "Gray Code", "url", "https://leetcode.com/problems/gray-code/"),
			    Map.of("title", "Bitwise AND of Numbers Range", "url", "https://leetcode.com/problems/bitwise-and-of-numbers-range/"),
			    Map.of("title", "Hamming Distance", "url", "https://leetcode.com/problems/hamming-distance/"),
			    Map.of("title", "Binary Watch", "url", "https://leetcode.com/problems/binary-watch/"),
			    Map.of("title", "Find the Duplicate Number", "url", "https://leetcode.com/problems/find-the-duplicate-number/"),
			    Map.of("title", "Maximum XOR of Two Numbers in an Array", "url", "https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/"),
			    Map.of("title", "Minimum XOR Sum of Two Arrays", "url", "https://leetcode.com/problems/minimum-xor-sum-of-two-arrays/"),
			    Map.of("title", "Generate a XOR-ed Array", "url", "https://leetcode.com/problems/maximum-xor-with-an-element-from-array/"),
			    Map.of("title", "Find XOR of All Subsets", "url", "https://leetcode.com/problems/subsets/"),
			    Map.of("title", "Longest Nice Subarray", "url", "https://leetcode.com/problems/longest-nice-subarray/")
			));

		PROBLEM_LINKS.put("Linked List", List.of(
				Map.of("title", "Reverse Linked List", "url", "https://leetcode.com/problems/reverse-linked-list/"),
				Map.of("title", "Merge Two Sorted Lists", "url",
						"https://leetcode.com/problems/merge-two-sorted-lists/"),
				Map.of("title", "Add Two Numbers", "url", "https://leetcode.com/problems/add-two-numbers/"),
				Map.of("title", "Remove Nth Node From End of List", "url",
						"https://leetcode.com/problems/remove-nth-node-from-end-of-list/"),
				Map.of("title", "Linked List Cycle", "url", "https://leetcode.com/problems/linked-list-cycle/"),
				Map.of("title", "Intersection of Two Linked Lists", "url",
						"https://leetcode.com/problems/intersection-of-two-linked-lists/"),
				Map.of("title", "Palindrome Linked List", "url",
						"https://leetcode.com/problems/palindrome-linked-list/"),
				Map.of("title", "Flatten a Multilevel Doubly Linked List", "url",
						"https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/"),
				Map.of("title", "Rotate List", "url", "https://leetcode.com/problems/rotate-list/"),
				Map.of("title", "Sort List", "url", "https://leetcode.com/problems/sort-list/"),
				Map.of("title", "Delete Node in a Linked List", "url",
						"https://leetcode.com/problems/delete-node-in-a-linked-list/"),
				Map.of("title", "Swap Nodes in Pairs", "url", "https://leetcode.com/problems/swap-nodes-in-pairs/"),
				Map.of("title", "Split Linked List in Parts", "url",
						"https://leetcode.com/problems/split-linked-list-in-parts/"),
				Map.of("title", "Remove Linked List Elements", "url",
						"https://leetcode.com/problems/remove-linked-list-elements/"),
				Map.of("title", "Reverse Nodes in k-Group", "url",
						"https://leetcode.com/problems/reverse-nodes-in-k-group/"),
				Map.of("title", "Partition List", "url", "https://leetcode.com/problems/partition-list/"),
				Map.of("title", "Reorder List", "url", "https://leetcode.com/problems/reorder-list/"),
				Map.of("title", "Copy List with Random Pointer", "url",
						"https://leetcode.com/problems/copy-list-with-random-pointer/"),
				Map.of("title", "Odd Even Linked List", "url", "https://leetcode.com/problems/odd-even-linked-list/"),
				Map.of("title", "Convert Binary Number in a Linked List to Integer", "url",
						"https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer/")));

		// Heap
		PROBLEM_LINKS.put("Heap", List.of(
				Map.of("title", "Merge k Sorted Lists", "url", "https://leetcode.com/problems/merge-k-sorted-lists/"),
				Map.of("title", "Find Median from Data Stream", "url",
						"https://leetcode.com/problems/find-median-from-data-stream/"),
				Map.of("title", "Kth Largest Element in an Array", "url",
						"https://leetcode.com/problems/kth-largest-element-in-an-array/"),
				Map.of("title", "K Closest Points to Origin", "url",
						"https://leetcode.com/problems/k-closest-points-to-origin/"),
				Map.of("title", "Top K Frequent Elements", "url",
						"https://leetcode.com/problems/top-k-frequent-elements/"),
				Map.of("title", "Sort Characters By Frequency", "url",
						"https://leetcode.com/problems/sort-characters-by-frequency/"),
				Map.of("title", "Sliding Window Median", "url", "https://leetcode.com/problems/sliding-window-median/"),
				Map.of("title", "Find K Pairs with Smallest Sums", "url",
						"https://leetcode.com/problems/find-k-pairs-with-smallest-sums/"),
				Map.of("title", "Minimum Cost to Connect Sticks", "url",
						"https://leetcode.com/problems/minimum-cost-to-connect-sticks/"),
				Map.of("title", "Reorganize String", "url", "https://leetcode.com/problems/reorganize-string/"),
				Map.of("title", "Kth Largest Element in a Stream", "url",
						"https://leetcode.com/problems/kth-largest-element-in-a-stream/"),
				Map.of("title", "Employee Free Time", "url", "https://leetcode.com/problems/employee-free-time/"),
				Map.of("title", "Task Scheduler", "url", "https://leetcode.com/problems/task-scheduler/"),
				Map.of("title", "Last Stone Weight", "url", "https://leetcode.com/problems/last-stone-weight/"),
				Map.of("title", "Furthest Building You Can Reach", "url",
						"https://leetcode.com/problems/furthest-building-you-can-reach/"),
				Map.of("title", "Maximum Average Pass Ratio", "url",
						"https://leetcode.com/problems/maximum-average-pass-ratio/"),
				Map.of("title", "Reduce Array Size to The Half", "url",
						"https://leetcode.com/problems/reduce-array-size-to-the-half/"),
				Map.of("title", "Minimum Deviation in Array", "url",
						"https://leetcode.com/problems/minimum-deviation-in-array/"),
				Map.of("title", "Smallest Range Covering Elements from K Lists", "url",
						"https://leetcode.com/problems/smallest-range-covering-elements-from-k-lists/"),
				Map.of("title", "Find the Most Competitive Subsequence", "url",
						"https://leetcode.com/problems/find-the-most-competitive-subsequence/")));

		// Map
		PROBLEM_LINKS.put("Map", List.of(Map.of("title", "Two Sum", "url", "https://leetcode.com/problems/two-sum/"),
				Map.of("title", "Subarray Sum Equals K", "url", "https://leetcode.com/problems/subarray-sum-equals-k/"),
				Map.of("title", "Longest Substring Without Repeating Characters", "url",
						"https://leetcode.com/problems/longest-substring-without-repeating-characters/"),
				Map.of("title", "Group Anagrams", "url", "https://leetcode.com/problems/group-anagrams/"),
				Map.of("title", "Word Pattern", "url", "https://leetcode.com/problems/word-pattern/"),
				Map.of("title", "Find Duplicate Subtrees", "url",
						"https://leetcode.com/problems/find-duplicate-subtrees/"),
				Map.of("title", "Isomorphic Strings", "url", "https://leetcode.com/problems/isomorphic-strings/"),
				Map.of("title", "Top K Frequent Words", "url", "https://leetcode.com/problems/top-k-frequent-words/"),
				Map.of("title", "Number of Boomerangs", "url", "https://leetcode.com/problems/number-of-boomerangs/"),
				Map.of("title", "Happy Number", "url", "https://leetcode.com/problems/happy-number/"),
				Map.of("title", "Minimum Index Sum of Two Lists", "url",
						"https://leetcode.com/problems/minimum-index-sum-of-two-lists/"),
				Map.of("title", "Find All Anagrams in a String", "url",
						"https://leetcode.com/problems/find-all-anagrams-in-a-string/"),
				Map.of("title", "Word Subsets", "url", "https://leetcode.com/problems/word-subsets/"),
				Map.of("title", "Palindrome Pairs", "url", "https://leetcode.com/problems/palindrome-pairs/"),
				Map.of("title", "Minimum Window Substring", "url",
						"https://leetcode.com/problems/minimum-window-substring/"),
				Map.of("title", "Brick Wall", "url", "https://leetcode.com/problems/brick-wall/"),
				Map.of("title", "Design HashMap", "url", "https://leetcode.com/problems/design-hashmap/"),
				Map.of("title", "Smallest Subsequence of Distinct Characters", "url",
						"https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/"),
				Map.of("title", "Shortest Completing Word", "url",
						"https://leetcode.com/problems/shortest-completing-word/"),
				Map.of("title", "Max Points on a Line", "url", "https://leetcode.com/problems/max-points-on-a-line/")));

		PROBLEM_LINKS.put("Math", List.of(
				Map.of("title", "Count Primes", "url", "https://leetcode.com/problems/count-primes/"),
				Map.of("title", "Power of Three", "url", "https://leetcode.com/problems/power-of-three/"),
				Map.of("title", "Fizz Buzz", "url", "https://leetcode.com/problems/fizz-buzz/"),
				Map.of("title", "Happy Number", "url", "https://leetcode.com/problems/happy-number/"),
				Map.of("title", "Integer to Roman", "url", "https://leetcode.com/problems/integer-to-roman/"),
				Map.of("title", "Roman to Integer", "url", "https://leetcode.com/problems/roman-to-integer/"),
				Map.of("title", "Add Digits", "url", "https://leetcode.com/problems/add-digits/"),
				Map.of("title", "Sqrt(x)", "url", "https://leetcode.com/problems/sqrtx/"),
				Map.of("title", "Excel Sheet Column Title", "url",
						"https://leetcode.com/problems/excel-sheet-column-title/"),
				Map.of("title", "Plus One", "url", "https://leetcode.com/problems/plus-one/"),
				Map.of("title", "Factorial Trailing Zeroes", "url",
						"https://leetcode.com/problems/factorial-trailing-zeroes/"),
				Map.of("title", "Valid Perfect Square", "url", "https://leetcode.com/problems/valid-perfect-square/"),
				Map.of("title", "Number of Digit One", "url", "https://leetcode.com/problems/number-of-digit-one/"),
				Map.of("title", "Greatest Common Divisor of Strings", "url",
						"https://leetcode.com/problems/greatest-common-divisor-of-strings/"),
				Map.of("title", "Bulb Switcher", "url", "https://leetcode.com/problems/bulb-switcher/"),
				Map.of("title", "Check If It Is a Straight Line", "url",
						"https://leetcode.com/problems/check-if-it-is-a-straight-line/"),
				Map.of("title", "Rectangle Overlap", "url", "https://leetcode.com/problems/rectangle-overlap/"),
				Map.of("title", "Perfect Squares", "url", "https://leetcode.com/problems/perfect-squares/"),
				Map.of("title", "Implement Power Function", "url", "https://leetcode.com/problems/powx-n/"),
				Map.of("title", "Nth Digit", "url", "https://leetcode.com/problems/nth-digit/")));

		// Union-Find
		PROBLEM_LINKS.put("Union-Find", List.of(
				Map.of("title", "Number of Connected Components in an Undirected Graph", "url",
						"https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/"),
				Map.of("title", "Friend Circles", "url", "https://leetcode.com/problems/friend-circles/"),
				Map.of("title", "Redundant Connection", "url", "https://leetcode.com/problems/redundant-connection/"),
				Map.of("title", "Graph Valid Tree", "url", "https://leetcode.com/problems/graph-valid-tree/"),
				Map.of("title", "Smallest String With Swaps", "url",
						"https://leetcode.com/problems/smallest-string-with-swaps/"),
				Map.of("title", "Accounts Merge", "url", "https://leetcode.com/problems/accounts-merge/"),
				Map.of("title", "Number of Provinces", "url", "https://leetcode.com/problems/number-of-provinces/"),
				Map.of("title", "Earliest Moment When Everyone Become Friends", "url",
						"https://leetcode.com/problems/the-earliest-moment-when-everyone-become-friends/"),
				Map.of("title", "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree", "url",
						"https://leetcode.com/problems/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree/"),
				Map.of("title", "Satisfiability of Equality Equations", "url",
						"https://leetcode.com/problems/satisfiability-of-equality-equations/"),
				Map.of("title", "Swim in Rising Water", "url", "https://leetcode.com/problems/swim-in-rising-water/"),
				Map.of("title", "Path With Minimum Effort", "url",
						"https://leetcode.com/problems/path-with-minimum-effort/"),
				Map.of("title", "Minimum Cost to Connect All Points", "url",
						"https://leetcode.com/problems/min-cost-to-connect-all-points/"),
				Map.of("title", "Longest Consecutive Sequence", "url",
						"https://leetcode.com/problems/longest-consecutive-sequence/"),
				Map.of("title", "Is Graph Bipartite?", "url", "https://leetcode.com/problems/is-graph-bipartite/"),
				Map.of("title", "Max Area of Island", "url", "https://leetcode.com/problems/max-area-of-island/"),
				Map.of("title", "Making A Large Island", "url", "https://leetcode.com/problems/making-a-large-island/"),
				Map.of("title", "Kruskal's Algorithm", "url",
						"https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/"),
				Map.of("title", "Connected Components in Graph", "url",
						"https://leetcode.com/problems/graph-valid-tree/"),
				Map.of("title", "Connected Cities", "url", "https://leetcode.com/problems/accounts-merge/")));

		// Topological Sort
		PROBLEM_LINKS.put("Topological Sort", List.of(
				Map.of("title", "Course Schedule", "url", "https://leetcode.com/problems/course-schedule/"),
				Map.of("title", "Course Schedule II", "url", "https://leetcode.com/problems/course-schedule-ii/"),
				Map.of("title", "Alien Dictionary", "url", "https://leetcode.com/problems/alien-dictionary/"),
				Map.of("title", "Minimum Height Trees", "url", "https://leetcode.com/problems/minimum-height-trees/"),
				Map.of("title", "Reconstruct Itinerary", "url", "https://leetcode.com/problems/reconstruct-itinerary/"),
				Map.of("title", "Sequence Reconstruction", "url",
						"https://leetcode.com/problems/sequence-reconstruction/"),
				Map.of("title", "Parallel Courses", "url", "https://leetcode.com/problems/parallel-courses/"),
				Map.of("title", "Topological Sort of DAG", "url", "https://leetcode.com/problems/course-schedule/"),
				Map.of("title", "Longest Path in DAG", "url", "https://leetcode.com/problems/course-schedule-ii/"),
				Map.of("title", "Find Eventual Safe States", "url",
						"https://leetcode.com/problems/find-eventual-safe-states/"),
				Map.of("title", "Shortest Path in DAG", "url", "https://leetcode.com/problems/network-delay-time/"),
				Map.of("title", "Network Delay Time", "url", "https://leetcode.com/problems/network-delay-time/"),
				Map.of("title", "Graph Valid Tree", "url", "https://leetcode.com/problems/graph-valid-tree/"),
				Map.of("title", "Course Prerequisites", "url", "https://leetcode.com/problems/course-schedule/"),
				Map.of("title", "Critical Connections", "url",
						"https://leetcode.com/problems/critical-connections-in-a-network/"),
				Map.of("title", "Strongly Connected Components", "url",
						"https://leetcode.com/problems/course-schedule/"),
				Map.of("title", "Task Scheduling", "url", "https://leetcode.com/problems/course-schedule-ii/"),
				Map.of("title", "Project Dependencies", "url", "https://leetcode.com/problems/alien-dictionary/"),
				Map.of("title", "Path in DAG", "url", "https://leetcode.com/problems/course-schedule/"),
				Map.of("title", "Find All Paths in DAG", "url", "https://leetcode.com/problems/course-schedule-ii/")));

		// Intervals
		PROBLEM_LINKS.put("Intervals", List.of(
				Map.of("title", "Merge Intervals", "url", "https://leetcode.com/problems/merge-intervals/"),
				Map.of("title", "Insert Interval", "url", "https://leetcode.com/problems/insert-interval/"),
				Map.of("title", "Non-overlapping Intervals", "url",
						"https://leetcode.com/problems/non-overlapping-intervals/"),
				Map.of("title", "Meeting Rooms", "url", "https://leetcode.com/problems/meeting-rooms/"),
				Map.of("title", "Meeting Rooms II", "url", "https://leetcode.com/problems/meeting-rooms-ii/"),
				Map.of("title", "Interval List Intersections", "url",
						"https://leetcode.com/problems/interval-list-intersections/"),
				Map.of("title", "Employee Free Time", "url", "https://leetcode.com/problems/employee-free-time/"),
				Map.of("title", "Minimum Number of Arrows to Burst Balloons", "url",
						"https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/"),
				Map.of("title", "Car Pooling", "url", "https://leetcode.com/problems/car-pooling/"),
				Map.of("title", "Maximum Number of Events That Can Be Attended", "url",
						"https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended/"),
				Map.of("title", "Range Addition", "url", "https://leetcode.com/problems/range-addition/"),
				Map.of("title", "My Calendar I", "url", "https://leetcode.com/problems/my-calendar-i/"),
				Map.of("title", "My Calendar II", "url", "https://leetcode.com/problems/my-calendar-ii/"),
				Map.of("title", "My Calendar III", "url", "https://leetcode.com/problems/my-calendar-iii/"),
				Map.of("title", "Find Right Interval", "url", "https://leetcode.com/problems/find-right-interval/"),
				Map.of("title", "Maximum Number of Points with Cost", "url",
						"https://leetcode.com/problems/maximum-number-of-points-with-cost/"),
				Map.of("title", "Count of Range Sum", "url", "https://leetcode.com/problems/count-of-range-sum/"),
				Map.of("title", "Interval Merge Sort", "url", "https://leetcode.com/problems/merge-intervals/"),
				Map.of("title", "Split Intervals", "url",
						"https://leetcode.com/problems/split-array-into-consecutive-subsequences/"),
				Map.of("title", "Interval Scheduling Maximization", "url",
						"https://leetcode.com/problems/non-overlapping-intervals/")));

		PROBLEM_LINKS.put("Monotonic Stack", List.of(
				Map.of("title", "Next Greater Element I", "url",
						"https://leetcode.com/problems/next-greater-element-i/"),
				Map.of("title", "Next Greater Element II", "url",
						"https://leetcode.com/problems/next-greater-element-ii/"),
				Map.of("title", "Daily Temperatures", "url", "https://leetcode.com/problems/daily-temperatures/"),
				Map.of("title", "Largest Rectangle in Histogram", "url",
						"https://leetcode.com/problems/largest-rectangle-in-histogram/"),
				Map.of("title", "Trapping Rain Water", "url", "https://leetcode.com/problems/trapping-rain-water/"),
				Map.of("title", "Sliding Window Maximum", "url",
						"https://leetcode.com/problems/sliding-window-maximum/"),
				Map.of("title", "Sum of Subarray Minimums", "url",
						"https://leetcode.com/problems/sum-of-subarray-minimums/"),
				Map.of("title", "132 Pattern", "url", "https://leetcode.com/problems/132-pattern/"),
				Map.of("title", "Validate Stack Sequences", "url",
						"https://leetcode.com/problems/validate-stack-sequences/"),
				Map.of("title", "Asteroid Collision", "url", "https://leetcode.com/problems/asteroid-collision/"),
				Map.of("title", "Next Smaller Element", "url",
						"https://leetcode.com/problems/sum-of-subarray-minimums/"),
				Map.of("title", "Maximal Rectangle", "url", "https://leetcode.com/problems/maximal-rectangle/"),
				Map.of("title", "Remove K Digits", "url", "https://leetcode.com/problems/remove-k-digits/"),
				Map.of("title", "Shortest Subarray with Sum at Least K", "url",
						"https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/"),
				Map.of("title", "Smallest Subsequence of Distinct Characters", "url",
						"https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/"),
				Map.of("title", "Increasing Triplet Subsequence", "url",
						"https://leetcode.com/problems/increasing-triplet-subsequence/"),
				Map.of("title", "Maximum Width Ramp", "url", "https://leetcode.com/problems/maximum-width-ramp/"),
				Map.of("title", "Remove Duplicate Letters", "url",
						"https://leetcode.com/problems/remove-duplicate-letters/"),
				Map.of("title", "Largest Rectangle Area", "url",
						"https://leetcode.com/problems/largest-rectangle-in-histogram/"),
				Map.of("title", "Decode String", "url", "https://leetcode.com/problems/decode-string/")));
		PROBLEM_LINKS.put("Game Theory",
				List.of(Map.of("title", "Nim Game", "url", "https://leetcode.com/problems/nim-game/"),
						Map.of("title", "Stone Game", "url", "https://leetcode.com/problems/stone-game/"),
						Map.of("title", "Predict the Winner", "url",
								"https://leetcode.com/problems/predict-the-winner/"),
						Map.of("title", "Stone Game II", "url", "https://leetcode.com/problems/stone-game-ii/"),
						Map.of("title", "Stone Game VII", "url", "https://leetcode.com/problems/stone-game-vii/"),
						Map.of("title", "Stone Game IX", "url", "https://leetcode.com/problems/stone-game-ix/"),
						Map.of("title", "Divisor Game", "url", "https://leetcode.com/problems/divisor-game/"),
						Map.of("title", "Flip Game II", "url", "https://leetcode.com/problems/flip-game-ii/"),
						Map.of("title", "Coin Change II", "url", "https://leetcode.com/problems/coin-change-ii/"),
						Map.of("title", "Count Numbers with Unique Digits", "url",
								"https://leetcode.com/problems/count-numbers-with-unique-digits/"),
						Map.of("title", "Optimal Division", "url", "https://leetcode.com/problems/optimal-division/"),
						Map.of("title", "Partition Array for Maximum Sum", "url",
								"https://leetcode.com/problems/partition-array-for-maximum-sum/"),
						Map.of("title", "Prison Break Problem", "url",
								"https://leetcode.com/problems/prison-cells-after-n-days/"),
						Map.of("title", "Handshakes That Don't Cross", "url",
								"https://leetcode.com/problems/handshakes-that-dont-cross/"),
						Map.of("title", "Check if There is a Valid Path in a Grid", "url",
								"https://leetcode.com/problems/check-if-there-is-a-valid-path-in-a-grid/"),
						Map.of("title", "Maximize Score After N Operations", "url",
								"https://leetcode.com/problems/maximize-score-after-n-operations/"),
						Map.of("title", "Candy", "url", "https://leetcode.com/problems/candy/"),
						Map.of("title", "Partition Equal Subset Sum", "url",
								"https://leetcode.com/problems/partition-equal-subset-sum/"),
						Map.of("title", "Soup Servings", "url", "https://leetcode.com/problems/soup-servings/"),
						Map.of("title", "Sum Game", "url", "https://leetcode.com/problems/sum-game/")));
		PROBLEM_LINKS.put("Trie", List.of(
				Map.of("title", "Implement Trie (Prefix Tree)", "url",
						"https://leetcode.com/problems/implement-trie-prefix-tree/"),
				Map.of("title", "Design Add and Search Words Data Structure", "url",
						"https://leetcode.com/problems/design-add-and-search-words-data-structure/"),
				Map.of("title", "Word Search II", "url", "https://leetcode.com/problems/word-search-ii/"),
				Map.of("title", "Replace Words", "url", "https://leetcode.com/problems/replace-words/"),
				Map.of("title", "Concatenated Words", "url", "https://leetcode.com/problems/concatenated-words/"),
				Map.of("title", "Longest Word in Dictionary", "url",
						"https://leetcode.com/problems/longest-word-in-dictionary/"),
				Map.of("title", "Add and Search Word", "url",
						"https://leetcode.com/problems/add-and-search-word-data-structure-design/"),
				Map.of("title", "Word Squares", "url", "https://leetcode.com/problems/word-squares/"),
				Map.of("title", "Implement Magic Dictionary", "url",
						"https://leetcode.com/problems/implement-magic-dictionary/"),
				Map.of("title", "Trie with Wildcard", "url",
						"https://leetcode.com/problems/design-add-and-search-words-data-structure/"),
				Map.of("title", "Count Words Matching a Prefix", "url",
						"https://leetcode.com/problems/count-words-matching-a-prefix/"),
				Map.of("title", "Maximum XOR of Two Numbers in an Array", "url",
						"https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/"),
				Map.of("title", "Map Sum Pairs", "url", "https://leetcode.com/problems/map-sum-pairs/"),
				Map.of("title", "Prefix and Suffix Search", "url",
						"https://leetcode.com/problems/prefix-and-suffix-search/"),
				Map.of("title", "Maximum Length of Concatenated String with Unique Characters", "url",
						"https://leetcode.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters/"),
				Map.of("title", "Replace With Shortest Prefix", "url", "https://leetcode.com/problems/replace-words/"),
				Map.of("title", "AutoComplete System", "url",
						"https://leetcode.com/problems/design-search-autocomplete-system/"),
				Map.of("title", "Sum of Prefix Scores of Strings", "url",
						"https://leetcode.com/problems/sum-of-prefix-scores-of-strings/"),
				Map.of("title", "Minimum Length Encoding", "url",
						"https://leetcode.com/problems/minimum-length-encoding/"),
				Map.of("title", "Find All Words That Match", "url",
						"https://leetcode.com/problems/find-all-words-that-match-in-a-dictionary/")));

		PROBLEM_LINKS.put("Sliding Window", List.of(
				Map.of("title", "Longest Substring Without Repeating Characters", "url",
						"https://leetcode.com/problems/longest-substring-without-repeating-characters/"),
				Map.of("title", "Minimum Window Substring", "url",
						"https://leetcode.com/problems/minimum-window-substring/"),
				Map.of("title", "Sliding Window Maximum", "url",
						"https://leetcode.com/problems/sliding-window-maximum/"),
				Map.of("title", "Find All Anagrams in a String", "url",
						"https://leetcode.com/problems/find-all-anagrams-in-a-string/"),
				Map.of("title", "Permutation in String", "url", "https://leetcode.com/problems/permutation-in-string/"),
				Map.of("title", "Longest Repeating Character Replacement", "url",
						"https://leetcode.com/problems/longest-repeating-character-replacement/"),
				Map.of("title", "Grumpy Bookstore Owner", "url",
						"https://leetcode.com/problems/grumpy-bookstore-owner/"),
				Map.of("title", "Subarray Product Less Than K", "url",
						"https://leetcode.com/problems/subarray-product-less-than-k/"),
				Map.of("title", "Maximum Points You Can Obtain from Cards", "url",
						"https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/"),
				Map.of("title", "Max Consecutive Ones III", "url",
						"https://leetcode.com/problems/max-consecutive-ones-iii/"),
				Map.of("title", "Count Number of Nice Subarrays", "url",
						"https://leetcode.com/problems/count-number-of-nice-subarrays/"),
				Map.of("title", "Fruit Into Baskets", "url", "https://leetcode.com/problems/fruit-into-baskets/"),
				Map.of("title", "Maximum Number of Vowels in a Substring of Given Length", "url",
						"https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/"),
				Map.of("title", "Subarrays with K Different Integers", "url",
						"https://leetcode.com/problems/subarrays-with-k-different-integers/"),
				Map.of("title", "Longest Subarray of Ones After Deleting One Element", "url",
						"https://leetcode.com/problems/longest-subarray-of-ones-after-deleting-one-element/"),
				Map.of("title", "Binary Subarrays With Sum", "url",
						"https://leetcode.com/problems/binary-subarrays-with-sum/"),
				Map.of("title", "Maximum Erasure Value", "url", "https://leetcode.com/problems/maximum-erasure-value/"),
				Map.of("title", "Count Subarrays With Fixed Bounds", "url",
						"https://leetcode.com/problems/count-subarrays-with-fixed-bounds/"),
				Map.of("title", "Replace Substring for Balanced String", "url",
						"https://leetcode.com/problems/replace-the-substring-for-balanced-string/"),
				Map.of("title", "Longest Subarray of Positive Product", "url",
						"https://leetcode.com/problems/longest-subarray-of-positive-product/")));
		PROBLEM_LINKS.put("Queue", List.of(
				Map.of("title", "Implement Queue Using Stacks", "url",
						"https://leetcode.com/problems/implement-queue-using-stacks/"),
				Map.of("title", "Design Circular Queue", "url", "https://leetcode.com/problems/design-circular-queue/"),
				Map.of("title", "Perfect Squares", "url", "https://leetcode.com/problems/perfect-squares/"),
				Map.of("title", "Sliding Window Maximum", "url",
						"https://leetcode.com/problems/sliding-window-maximum/"),
				Map.of("title", "Time Needed to Inform All Employees", "url",
						"https://leetcode.com/problems/time-needed-to-inform-all-employees/"),
				Map.of("title", "Rotting Oranges", "url", "https://leetcode.com/problems/rotting-oranges/"),
				Map.of("title", "Minimum Moves to Equal Array Elements II", "url",
						"https://leetcode.com/problems/minimum-moves-to-equal-array-elements-ii/"),
				Map.of("title", "The Maze", "url", "https://leetcode.com/problems/the-maze/"),
				Map.of("title", "Course Schedule", "url", "https://leetcode.com/problems/course-schedule/"),
				Map.of("title", "Number of Recent Calls", "url",
						"https://leetcode.com/problems/number-of-recent-calls/"),
				Map.of("title", "Find the Winner of the Circular Game", "url",
						"https://leetcode.com/problems/find-the-winner-of-the-circular-game/"),
				Map.of("title", "Jump Game III", "url", "https://leetcode.com/problems/jump-game-iii/"),
				Map.of("title", "Escape the Ghosts", "url", "https://leetcode.com/problems/escape-the-ghosts/"),
				Map.of("title", "Shortest Path in a Grid with Obstacles Elimination", "url",
						"https://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/"),
				Map.of("title", "Walls and Gates", "url", "https://leetcode.com/problems/walls-and-gates/"),
				Map.of("title", "Shortest Distance from All Buildings", "url",
						"https://leetcode.com/problems/shortest-distance-from-all-buildings/"),
				Map.of("title", "Bus Routes", "url", "https://leetcode.com/problems/bus-routes/"),
				Map.of("title", "Binary Tree Level Order Traversal", "url",
						"https://leetcode.com/problems/binary-tree-level-order-traversal/"),
				Map.of("title", "Serialize and Deserialize Binary Tree", "url",
						"https://leetcode.com/problems/serialize-and-deserialize-binary-tree/"),
				Map.of("title", "Maximum Depth of N-ary Tree", "url",
						"https://leetcode.com/problems/maximum-depth-of-n-ary-tree/")));

		PROBLEM_LINKS.put("Prefix Sums", List.of(
				Map.of("title", "Subarray Sum Equals K", "url", "https://leetcode.com/problems/subarray-sum-equals-k/"),
				Map.of("title", "Range Sum Query - Immutable", "url",
						"https://leetcode.com/problems/range-sum-query-immutable/"),
				Map.of("title", "Range Sum Query 2D - Immutable", "url",
						"https://leetcode.com/problems/range-sum-query-2d-immutable/"),
				Map.of("title", "Product of Array Except Self", "url",
						"https://leetcode.com/problems/product-of-array-except-self/"),
				Map.of("title", "Find Pivot Index", "url", "https://leetcode.com/problems/find-pivot-index/"),
				Map.of("title", "Count Number of Nice Subarrays", "url",
						"https://leetcode.com/problems/count-number-of-nice-subarrays/"),
				Map.of("title", "Binary Subarrays with Sum", "url",
						"https://leetcode.com/problems/binary-subarrays-with-sum/"),
				Map.of("title", "Sum of All Odd Length Subarrays", "url",
						"https://leetcode.com/problems/sum-of-all-odd-length-subarrays/"),
				Map.of("title", "Cumulative Sum", "url", "https://leetcode.com/problems/range-sum-query-immutable/"),
				Map.of("title", "Maximum Subarray", "url", "https://leetcode.com/problems/maximum-subarray/"),
				Map.of("title", "Number of Subarrays with Bounded Maximum", "url",
						"https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/"),
				Map.of("title", "Minimum Size Subarray Sum", "url",
						"https://leetcode.com/problems/minimum-size-subarray-sum/"),
				Map.of("title", "Maximum Average Subarray I", "url",
						"https://leetcode.com/problems/maximum-average-subarray-i/"),
				Map.of("title", "Maximum Average Subarray II", "url",
						"https://leetcode.com/problems/maximum-average-subarray-ii/"),
				Map.of("title", "Split Array with Equal Sum", "url",
						"https://leetcode.com/problems/split-array-with-equal-sum/"),
				Map.of("title", "Number of Submatrices That Sum to Target", "url",
						"https://leetcode.com/problems/number-of-submatrices-that-sum-to-target/"),
				Map.of("title", "Contiguous Array", "url", "https://leetcode.com/problems/contiguous-array/"),
				Map.of("title", "Find Pivot Index", "url", "https://leetcode.com/problems/find-pivot-index/"),
				Map.of("title", "Sum of Prefix Scores of Strings", "url",
						"https://leetcode.com/problems/sum-of-prefix-scores-of-strings/"),
				Map.of("title", "Range Addition", "url", "https://leetcode.com/problems/range-addition/")));
		PROBLEM_LINKS.put("Matrix", List.of(
				Map.of("title", "Set Matrix Zeroes", "url", "https://leetcode.com/problems/set-matrix-zeroes/"),
				Map.of("title", "Spiral Matrix", "url", "https://leetcode.com/problems/spiral-matrix/"),
				Map.of("title", "Search a 2D Matrix", "url", "https://leetcode.com/problems/search-a-2d-matrix/"),
				Map.of("title", "Search a 2D Matrix II", "url", "https://leetcode.com/problems/search-a-2d-matrix-ii/"),
				Map.of("title", "Word Search", "url", "https://leetcode.com/problems/word-search/"),
				Map.of("title", "Maximal Rectangle", "url", "https://leetcode.com/problems/maximal-rectangle/"),
				Map.of("title", "Number of Islands", "url", "https://leetcode.com/problems/number-of-islands/"),
				Map.of("title", "Flood Fill", "url", "https://leetcode.com/problems/flood-fill/"),
				Map.of("title", "Matrix Block Sum", "url", "https://leetcode.com/problems/matrix-block-sum/"),
				Map.of("title", "Rotting Oranges", "url", "https://leetcode.com/problems/rotting-oranges/"),
				Map.of("title", "Diagonal Traverse", "url", "https://leetcode.com/problems/diagonal-traverse/"),
				Map.of("title", "Toeplitz Matrix", "url", "https://leetcode.com/problems/toeplitz-matrix/"),
				Map.of("title", "Saddle Point in Matrix", "url",
						"https://leetcode.com/problems/lucky-numbers-in-a-matrix/"),
				Map.of("title", "Minimum Falling Path Sum", "url",
						"https://leetcode.com/problems/minimum-falling-path-sum/"),
				Map.of("title", "Maximal Square", "url", "https://leetcode.com/problems/maximal-square/"),
				Map.of("title", "Surrounded Regions", "url", "https://leetcode.com/problems/surrounded-regions/"),
				Map.of("title", "Game of Life", "url", "https://leetcode.com/problems/game-of-life/"),
				Map.of("title", "Kth Smallest Element in a Sorted Matrix", "url",
						"https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/"),
				Map.of("title", "Binary Matrix with at Least One", "url",
						"https://leetcode.com/problems/shortest-path-in-binary-matrix/"),
				Map.of("title", "Minimum Path Sum", "url", "https://leetcode.com/problems/minimum-path-sum/")));
		PROBLEM_LINKS.put("Intervals", List.of(
				Map.of("title", "Merge Intervals", "url", "https://leetcode.com/problems/merge-intervals/"),
				Map.of("title", "Insert Interval", "url", "https://leetcode.com/problems/insert-interval/"),
				Map.of("title", "Non-overlapping Intervals", "url",
						"https://leetcode.com/problems/non-overlapping-intervals/"),
				Map.of("title", "Meeting Rooms", "url", "https://leetcode.com/problems/meeting-rooms/"),
				Map.of("title", "Meeting Rooms II", "url", "https://leetcode.com/problems/meeting-rooms-ii/"),
				Map.of("title", "Interval List Intersections", "url",
						"https://leetcode.com/problems/interval-list-intersections/"),
				Map.of("title", "Minimum Number of Arrows to Burst Balloons", "url",
						"https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/"),
				Map.of("title", "Employee Free Time", "url", "https://leetcode.com/problems/employee-free-time/"),
				Map.of("title", "Range Module", "url", "https://leetcode.com/problems/range-module/"),
				Map.of("title", "Find Right Interval", "url", "https://leetcode.com/problems/find-right-interval/"),
				Map.of("title", "Car Pooling", "url", "https://leetcode.com/problems/car-pooling/"),
				Map.of("title", "Maximize Distance to Closest Person", "url",
						"https://leetcode.com/problems/maximize-distance-to-closest-person/"),
				Map.of("title", "Divide Intervals Into Minimum Number of Groups", "url",
						"https://leetcode.com/problems/divide-intervals-into-minimum-number-of-groups/"),
				Map.of("title", "Max Profit in Job Scheduling", "url",
						"https://leetcode.com/problems/maximum-profit-in-job-scheduling/"),
				Map.of("title", "Interval Partitioning", "url",
						"https://leetcode.com/problems/divide-intervals-into-minimum-number-of-groups/"),
				Map.of("title", "Remove Covered Intervals", "url",
						"https://leetcode.com/problems/remove-covered-intervals/"),
				Map.of("title", "Merge Intervals with Extra Condition", "url",
						"https://leetcode.com/problems/interval-list-intersections/"),
				Map.of("title", "Minimum Interval to Include Each Query", "url",
						"https://leetcode.com/problems/minimum-interval-to-include-each-query/"),
				Map.of("title", "Erase Overlap Intervals", "url",
						"https://leetcode.com/problems/erase-overlap-intervals/"),
				Map.of("title", "Largest Interval with Distinct Numbers", "url",
						"https://leetcode.com/problems/divide-intervals-into-minimum-number-of-groups/")));

	}
}
